{"version":3,"sources":["Landing/profile.jpg","Footer/Footer.tsx","Landing/Graphic/Graphic.tsx","Landing/Landing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Footer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","React","Component","Graphic","_this","state","height","maxSize","maxVelocity","minSize","numParticles","particles","width","loop","bind","assertThisInitialized","updateDimensions","_this$state","i","pt","rgba","randomColour","size","randomNumber","velocityX","velocityY","x","y","push","setState","requestAnimationFrame","window","addEventListener","removeEventListener","innerHeight","innerWidth","context","refs","canvas","getContext","_this$state2","clearRect","save","style","scale","devicePixelRatio","forEach","particle","beginPath","arc","Math","PI","strokeStyle","stroke","fillStyle","fill","drawParticle","ref","min","max","random","Landing","showPanel","id","Graphic_Graphic_Graphic","src","ProfilePic","alt","href","App","Landing_Landing_Landing","Footer_Footer_Footer","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1172b749.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.746e6f45.jpg\";","import React from \"react\";\n\nimport \"./Footer.css\";\n\nexport default class Footer extends React.Component<{}, {}> {\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    return (\n        <div className=\"Footer\">\n          <p> Copyright 2023 - Thomas Northall-Little </p>\n        </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Graphic.css\";\n\ninterface IParticle {\n  x: number;\n  y: number;\n  velocityX: number;\n  velocityY: number;\n  rgba: string;\n  size: number;\n}\n\ninterface IGraphicState {\n  particles: IParticle[];\n  numParticles: number;\n  maxVelocity: number;\n  maxSize: number;\n  minSize: number;\n  width: number;\n  height: number;\n}\n\nexport default class Graphic extends Component <{}, IGraphicState> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      height: 1080,\n      maxSize: 2,\n      maxVelocity: 3,\n      minSize: 0.3,\n      numParticles: 20,\n      particles: [],\n      width: 1920,\n    };\n\n    this.loop = this.loop.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  public componentWillMount() {\n    this.updateDimensions();\n  }\n\n  public componentDidMount() {\n\n    const particles: IParticle[] = [];\n\n    const {\n      height,\n      maxSize,\n      minSize,\n      maxVelocity,\n      numParticles,\n      width,\n    } = this.state;\n\n    for (let i = 1; i <= numParticles; i++) {\n\n      const pt: IParticle = {\n        rgba: randomColour(),\n        size: randomNumber(minSize, maxSize),\n        velocityX: randomNumber(-maxVelocity, maxVelocity),\n        velocityY: randomNumber(-maxVelocity, maxVelocity),\n        x: width / 2,\n        y: height / 2,\n      };\n\n      particles.push(pt);\n    }\n\n    this.setState({\n      particles,\n    });\n\n    requestAnimationFrame(this.loop);\n\n    // resize listener\n    window.addEventListener(\"resize\", this.updateDimensions);\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  public updateDimensions() {\n    this.setState({\n      height: window.innerHeight,\n      width: window.innerWidth,\n    });\n  }\n\n  public loop() {\n\n    // break case ?\n\n    requestAnimationFrame(this.loop);\n\n    const canvas = this.refs.canvas;\n\n    // @ts-ignore\n    const context = canvas.getContext(\"2d\");\n\n    const {\n      width,\n      height,\n    } = this.state;\n\n    context.clearRect(0, 0, width, height);\n    context.save();\n\n    // update the canvas size\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\n    context.canvas.style.width = width + \"px\";\n    context.canvas.style.height = height + \"px\";\n\n    const scale = window.devicePixelRatio;\n    context.canvas.width = width * scale;\n    context.canvas.height = height * scale;\n\n    context.scale(scale, scale);\n\n    this.state.particles.forEach((particle) => {\n\n      drawParticle(particle, context);\n\n      particle.x += particle.velocityX;\n      particle.y += particle.velocityY;\n\n      if (particle.x < 0 || particle.x > width) {\n        particle.velocityX = -particle.velocityX;\n        particle.x = particle.x < 0 ? 1 : width;\n      }\n\n      if (particle.y < 0 || particle.y > height) {\n        particle.velocityY = -particle.velocityY;\n        particle.y = particle.y < 0 ? 1 : height;\n      }\n\n      return particle;\n    });\n  }\n\n  public render() {\n    return (\n      <canvas className=\"particle\" ref=\"canvas\"/>\n    );\n  }\n}\n\nfunction randomNumber(min: number, max: number): number {\n  return (Math.random() * (max - min)) + min;\n}\n\nfunction randomColour(): string {\n  const rand = randomNumber(0, 10);\n\n  return rand < 5 ? \"#282c34\" : \"#B9009A\";\n}\n\nfunction drawParticle(pt: IParticle, context: any) {\n  const size = pt.size;\n\n  context.beginPath();\n  context.arc(pt.x, pt.y, size, 0, 2 * Math.PI);\n  context.strokeStyle = pt.rgba;\n  context.stroke();\n\n  context.fillStyle = pt.rgba;\n  context.fill();\n}\n","import React from \"react\";\n\nimport Graphic from \"./Graphic/Graphic\";\nimport \"./Landing.css\";\nimport ProfilePic from \"./profile.jpg\";\n\ninterface ILandingState {\n  showPanel: boolean;\n}\n\nexport default class Landing extends React.Component<{}, ILandingState> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      showPanel: false,\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className=\"landing\" id=\"home\">\n\n        <Graphic/>\n\n        {/* <div className=\"Navbar\">\n          <ul>\n            <li><a href=\"#about\">About</a></li>\n          </ul>\n        </div> */}\n\n        <div className={\"info\"}>\n          <img src={ProfilePic} className=\"Profile-Pic\" alt={\"Profile Picture\"}/>\n          <h1>Thomas Northall-Little</h1>\n          <p className=\"byline\">Senior Software Engineer at Canva</p>\n\n          <p> <a href=\"mailto:contact@tomnlittle.com\">contact@tomnlittle.com</a></p>\n          <p className=\"Links\">\n            <a href=\"https://www.linkedin.com/in/thomas-northall-little-073604111\">LinkedIn</a>\n            <a href=\"https://github.com/tomnlittle\">GitHub</a>\n          </p>\n\n          {/* <Button onClick={() => this.props.handleClick()}> About </Button> */}\n          {/* <Button onClick={() => this.props.handleClick()}> Experience </Button> */}\n\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport About from \"./About/About\";\nimport \"./App.css\";\nimport Footer from \"./Footer/Footer\";\nimport Landing from \"./Landing/Landing\";\n\nexport default class App extends React.Component<{}, {}> {\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    return (\n        <div className=\"App\">\n          <Landing/>\n          {/* <About/> */}\n          <Footer/>\n        </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}